name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage --passWithNoTests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets in code
        run: |
          echo "üîç Scanning for potential secrets..."
          # Use the same improved scan as security.yml
          if grep -r -i "password\|secret\|key\|token\|api_key" . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=__tests__ \
            --exclude-dir=coverage \
            --exclude="*.md" \
            --exclude="*.test.ts" \
            --exclude="*.test.tsx" \
            --exclude="*locales*.json" \
            --exclude="google-services.json.template" \
            | grep -v "test-" \
            | grep -v "mock" \
            | grep -v "verse_key" \
            | grep -v "method_Turkey" \
            | grep -v "Turkey" \
            | grep -v "jest.fn" \
            | grep -v "jest.fn((key)" \
            | grep -v "translation.*key" \
            | grep -v '"key"' \
            | grep -v "'key'" \
            | grep -v "keyof" \
            | grep -v "apiKey.*test"; then
            echo "‚ùå Real secrets found in code"
            exit 1
          else
            echo "‚úÖ No real secrets found"
          fi

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Check for google-services.json
        run: |
          if [ ! -f "android/app/google-services.json" ]; then
            echo "‚ö†Ô∏è google-services.json not found, builds will be skipped"
            echo "Please add google-services.json to configure mobile builds"
          else
            echo "‚úÖ google-services.json found"
          fi

      - name: Build Android (if configured)
        run: |
          if [ -f "android/app/google-services.json" ]; then
            eas build --platform android --non-interactive
          else
            echo "‚è≠Ô∏è Skipping Android build - google-services.json not configured"
          fi

      - name: Build iOS (if configured)  
        run: |
          if [ -f "ios/GoogleService-Info.plist" ] || [ "${{ secrets.EXPO_TOKEN }}" != "" ]; then
            eas build --platform ios --non-interactive
          else
            echo "‚è≠Ô∏è Skipping iOS build - GoogleService-Info.plist or EXPO_TOKEN not configured"
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        run: |
          echo "üöÄ Deploying to production server..."
          # Add your deployment script here
          # Example: ./scripts/deploy.sh
