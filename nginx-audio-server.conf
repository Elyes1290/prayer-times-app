# Configuration NGINX pour streaming audio optimisé
# Fichier : /etc/nginx/sites-available/audio-server

server {
    listen 80;
    server_name votre-serveur.com;
    
    # Redirection vers HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name votre-serveur.com;
    
    # SSL Let's Encrypt (à configurer)
    ssl_certificate /etc/letsencrypt/live/votre-serveur.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/votre-serveur.com/privkey.pem;
    
    # Optimisations SSL
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Compression
    gzip on;
    gzip_comp_level 6;
    gzip_types audio/mpeg audio/mp4 application/json;
    
    # Cache et performance
    sendfile on;
    tcp_nodelay on;
    tcp_nopush on;
    
    # Headers de cache pour audio
    location ~* \.(mp3|mp4|aac)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Accept-Ranges bytes;
        
        # Protection contre le hotlinking
        valid_referers none blocked votre-serveur.com *.votre-serveur.com;
        if ($invalid_referer) {
            return 403;
        }
    }
    
    # API pour vérification premium
    location /api/auth {
        # Ici vous pouvez ajouter votre logique d'authentification
        # Pour l'instant, on autorise tout
        return 200 "OK";
        add_header Content-Type text/plain;
    }
    
    # Fichiers audio premium
    location /audio/premium/ {
        alias /var/www/audio/premium/;
        
        # Vérification premium (à personnaliser)
        # auth_request /api/auth;
        
        # Optimisations streaming
        tcp_nodelay on;
        tcp_nopush on;
        
        # Logs détaillés
        access_log /var/log/nginx/audio_access.log;
    }
    
    # Catalogue et métadonnées
    location /api/catalog {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # Status et monitoring
    location /status {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }
}