#!/bin/bash

# üîê Script de v√©rification de s√©curit√© pour Prayer Times App
# V√©rifie qu'aucun fichier sensible n'est expos√© dans le repository

echo "üîç V√âRIFICATION DE S√âCURIT√â - Prayer Times App"
echo "=============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
ERRORS=0
WARNINGS=0

# 1. V√©rifier les fichiers sensibles dans le repository
echo -e "\nüìÅ V√©rification des fichiers sensibles..."

SENSITIVE_FILES=(
  "google-services.json"
  "GoogleService-Info.plist"
  ".env"
  ".env.local"
  ".env.production"
  "android/gradle.properties"
  "android/app/google-services.json"
  "ios/GoogleService-Info.plist"
)

for file in "${SENSITIVE_FILES[@]}"; do
  if git ls-files | grep -q "$file"; then
    echo -e "${RED}‚ùå ERREUR: $file est dans le repository!${NC}"
    ERRORS=$((ERRORS + 1))
  else
    echo -e "${GREEN}‚úÖ $file est correctement ignor√©${NC}"
  fi
done

# 2. V√©rifier les patterns de secrets dans les fichiers
echo -e "\nüîë V√©rification des patterns de secrets..."

SECRET_PATTERNS=(
  "password.*="
  "secret.*="
  "key.*="
  "token.*="
  "api_key.*="
  "AIza[A-Za-z0-9_-]{35}"
  "sk_[a-zA-Z0-9]{24}"
  "pk_[a-zA-Z0-9]{24}"
)

for pattern in "${SECRET_PATTERNS[@]}"; do
  if git diff --cached | grep -i "$pattern" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå ERREUR: Pattern de secret d√©tect√©: $pattern${NC}"
    ERRORS=$((ERRORS + 1))
  fi
done

# 3. V√©rifier les fichiers de configuration
echo -e "\n‚öôÔ∏è V√©rification des fichiers de configuration..."

CONFIG_FILES=(
  "app.config.js"
  "app.config.ts"
  "firebase-config.json"
  "firebase-config.js"
  "firebase-config.ts"
)

for file in "${CONFIG_FILES[@]}"; do
  if [ -f "$file" ]; then
    if grep -q "your_.*_here\|placeholder\|example" "$file"; then
      echo -e "${YELLOW}‚ö†Ô∏è ATTENTION: $file contient des valeurs d'exemple${NC}"
      WARNINGS=$((WARNINGS + 1))
    else
      echo -e "${GREEN}‚úÖ $file semble configur√©${NC}"
    fi
  fi
done

# 4. V√©rifier les certificats et cl√©s
echo -e "\nüîê V√©rification des certificats et cl√©s..."

CERT_FILES=(
  "*.keystore"
  "*.jks"
  "*.p8"
  "*.p12"
  "*.key"
  "*.pem"
)

for pattern in "${CERT_FILES[@]}"; do
  if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
    echo -e "${YELLOW}‚ö†Ô∏è ATTENTION: Fichiers de certificat trouv√©s: $pattern${NC}"
    WARNINGS=$((WARNINGS + 1))
  fi
done

# 5. V√©rifier les variables d'environnement
echo -e "\nüåç V√©rification des variables d'environnement..."

if [ -f ".env" ]; then
  if grep -q "your_.*_here\|placeholder\|example" ".env"; then
    echo -e "${YELLOW}‚ö†Ô∏è ATTENTION: .env contient des valeurs d'exemple${NC}"
    WARNINGS=$((WARNINGS + 1))
  else
    echo -e "${GREEN}‚úÖ .env semble configur√©${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è ATTENTION: Fichier .env manquant${NC}"
  WARNINGS=$((WARNINGS + 1))
fi

# 6. V√©rifier le .gitignore
echo -e "\nüìã V√©rification du .gitignore..."

GITIGNORE_PATTERNS=(
  "google-services.json"
  "GoogleService-Info.plist"
  ".env"
  "*.keystore"
  "*.jks"
  "*.p8"
  "*.p12"
  "*.key"
  "*.pem"
)

for pattern in "${GITIGNORE_PATTERNS[@]}"; do
  if grep -q "$pattern" ".gitignore"; then
    echo -e "${GREEN}‚úÖ $pattern est dans .gitignore${NC}"
  else
    echo -e "${RED}‚ùå ERREUR: $pattern manque dans .gitignore${NC}"
    ERRORS=$((ERRORS + 1))
  fi
done

# R√©sum√©
echo -e "\nüìä R√âSUM√â DE LA V√âRIFICATION"
echo "=============================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
  echo -e "${GREEN}üéâ PARFAIT! Aucun probl√®me de s√©curit√© d√©tect√©${NC}"
  exit 0
elif [ $ERRORS -eq 0 ]; then
  echo -e "${YELLOW}‚ö†Ô∏è ATTENTION: $WARNINGS avertissement(s) d√©tect√©(s)${NC}"
  exit 0
else
  echo -e "${RED}‚ùå ERREUR: $ERRORS erreur(s) critique(s) d√©tect√©e(s)${NC}"
  echo -e "${RED}‚ùå ERREUR: $WARNINGS avertissement(s) d√©tect√©(s)${NC}"
  echo -e "\nüîß ACTIONS REQUISES:"
  echo "1. Retirez les fichiers sensibles du repository"
  echo "2. Ajoutez les patterns manquants au .gitignore"
  echo "3. Remplacez les valeurs d'exemple par de vraies valeurs"
  echo "4. Relancez ce script pour v√©rifier"
  exit 1
fi 