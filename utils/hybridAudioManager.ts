import AsyncStorage from "@react-native-async-storage/async-storage";
// TODO: Installer @react-native-community/netinfo pour la d√©tection r√©seau
// import NetInfo from "@react-native-community/netinfo";
import { Audio } from "expo-av";
import AudioStreamingManager from "./audioStreaming";
import PremiumContentManager from "./premiumContent";
import CDNOptimizer from "./cdnOptimization";

export interface HybridConfig {
  autoDownloadOnWifi: boolean;
  streamOnMobileData: boolean;
  offlineFirstPriority: boolean;
  maxStreamingBitrate: number;
  downloadQuality: "high" | "medium" | "low";
}

export interface AudioPlaybackOptions {
  mode: "preview" | "full" | "offline" | "auto";
  allowDownload: boolean;
  forceOffline: boolean;
  quality?: "high" | "medium" | "low";
}

export interface PlaybackSession {
  id: string;
  contentId: string;
  mode: "streaming" | "local" | "download";
  sound: Audio.Sound | null;
  isPlaying: boolean;
  canGoOffline: boolean;
  downloadProgress?: number;
}

export class HybridAudioManager {
  private static instance: HybridAudioManager;
  private streamingManager: AudioStreamingManager;
  private contentManager: PremiumContentManager;
  private cdnOptimizer: CDNOptimizer;
  private activeSessions: Map<string, PlaybackSession> = new Map();

  private config: HybridConfig = {
    autoDownloadOnWifi: true,
    streamOnMobileData: true,
    offlineFirstPriority: true,
    maxStreamingBitrate: 128,
    downloadQuality: "high",
  };

  private readonly CONFIG_KEY = "@hybrid_audio_config";

  public static getInstance(): HybridAudioManager {
    if (!HybridAudioManager.instance) {
      HybridAudioManager.instance = new HybridAudioManager();
    }
    return HybridAudioManager.instance;
  }

  private constructor() {
    this.streamingManager = AudioStreamingManager.getInstance();
    this.contentManager = PremiumContentManager.getInstance();
    this.cdnOptimizer = CDNOptimizer.getInstance();
    this.loadConfig();
  }

  /**
   * üéµ FONCTION PRINCIPALE : Lecture intelligente avec choix optimal
   */
  public async playAudio(
    contentId: string,
    options: AudioPlaybackOptions = {
      mode: "auto",
      allowDownload: true,
      forceOffline: false,
    }
  ): Promise<Audio.Sound | null> {
    console.log(`üéµ Lecture intelligente: ${contentId}, mode: ${options.mode}`);

    // TODO: Impl√©menter la logique compl√®te
    return null;
  }

  /**
   * üß† D√©terminer la strat√©gie optimale de lecture
   */
  private async determinePlaybackStrategy(
    content: any,
    options: AudioPlaybackOptions,
    network: { isOnline: boolean; isWifi: boolean }
  ): Promise<{
    mode: "local" | "streaming" | "download";
    reason: string;
    downloadAfter?: boolean;
  }> {
    // 1. PRIORIT√â ABSOLUE : Fichier local existant
    const localPath = await this.contentManager.isContentDownloaded(content.id);
    if (localPath) {
      return {
        mode: "local",
        reason: "‚úÖ Fichier local disponible (optimal)",
      };
    }

    // 2. MODE HORS LIGNE FORC√â
    if (options.forceOffline || !network.isOnline) {
      throw new Error("Mode hors ligne demand√© mais fichier non t√©l√©charg√©");
    }

    // 3. PR√âVISUALISATION RAPIDE (streaming)
    if (options.mode === "preview") {
      return {
        mode: "streaming",
        reason: "üéß Pr√©visualisation - streaming √©conomique",
        downloadAfter: network.isWifi && this.config.autoDownloadOnWifi,
      };
    }

    // 4. ANALYSE INTELLIGENTE selon contexte

    // Sur WiFi : pr√©f√©rer t√©l√©chargement pour usage futur
    if (network.isWifi && options.allowDownload) {
      return {
        mode: "download",
        reason: "üì• WiFi d√©tect√© - t√©l√©chargement pour usage hors ligne",
      };
    }

    // Sur donn√©es mobiles : streaming pour √©conomiser
    if (!network.isWifi && this.config.streamOnMobileData) {
      return {
        mode: "streaming",
        reason: "üì± Donn√©es mobiles - streaming pour √©conomiser",
      };
    }

    // Fallback : streaming
    return {
      mode: "streaming",
      reason: "üåê Streaming par d√©faut",
    };
  }

  /**
   * ‚ö° Ex√©cuter la strat√©gie de lecture choisie
   */
  private async executePlaybackStrategy(
    content: any,
    strategy: {
      mode: "local" | "streaming" | "download";
      reason: string;
      downloadAfter?: boolean;
    }
  ): Promise<PlaybackSession | null> {
    const sessionId = `hybrid_${content.id}_${Date.now()}`;

    switch (strategy.mode) {
      case "local":
        return await this.playFromLocal(sessionId, content);

      case "streaming":
        const streamSession = await this.playFromStreaming(sessionId, content);

        // T√©l√©chargement automatique en arri√®re-plan si configur√©
        if (strategy.downloadAfter) {
          this.scheduleBackgroundDownload(content);
        }

        return streamSession;

      case "download":
        return await this.playWithDownload(sessionId, content);

      default:
        throw new Error(`Strat√©gie inconnue: ${strategy.mode}`);
    }
  }

  /**
   * üìÅ Lecture depuis fichier local (optimal - hors ligne)
   */
  private async playFromLocal(
    sessionId: string,
    content: any
  ): Promise<PlaybackSession | null> {
    try {
      const localPath = await this.contentManager.isContentDownloaded(
        content.id
      );
      if (!localPath) {
        throw new Error("Fichier local introuvable");
      }

      console.log(`üìÅ Lecture locale: ${localPath}`);

      const { sound } = await Audio.Sound.createAsync(
        { uri: localPath },
        { shouldPlay: false }
      );

      return {
        id: sessionId,
        contentId: content.id,
        mode: "local",
        sound,
        isPlaying: false,
        canGoOffline: true,
      };
    } catch (error) {
      console.error("‚ùå Erreur lecture locale:", error);
      return null;
    }
  }

  /**
   * üåê Lecture en streaming (√©conomique - en ligne)
   */
  private async playFromStreaming(
    sessionId: string,
    content: any
  ): Promise<PlaybackSession | null> {
    try {
      console.log(`üåê D√©marrage streaming: ${content.id}`);

      const streamSessionId = await this.contentManager.createStreamingSession(
        content
      );
      if (!streamSessionId) {
        throw new Error("Impossible de cr√©er session streaming");
      }

      const sound = await this.contentManager.startOptimizedStreaming(
        streamSessionId
      );
      if (!sound) {
        throw new Error("Impossible de d√©marrer streaming");
      }

      return {
        id: sessionId,
        contentId: content.id,
        mode: "streaming",
        sound,
        isPlaying: false,
        canGoOffline: false,
      };
    } catch (error) {
      console.error("‚ùå Erreur streaming:", error);
      return null;
    }
  }

  /**
   * üì• T√©l√©chargement puis lecture (optimal pour usage r√©current)
   */
  private async playWithDownload(
    sessionId: string,
    content: any
  ): Promise<PlaybackSession | null> {
    try {
      console.log(`üì• T√©l√©chargement puis lecture: ${content.id}`);

      // Cr√©er la session avec suivi de progression
      const session: PlaybackSession = {
        id: sessionId,
        contentId: content.id,
        mode: "download",
        sound: null,
        isPlaying: false,
        canGoOffline: false,
        downloadProgress: 0,
      };

      // T√©l√©charger avec suivi de progression
      const downloadSuccess = await this.contentManager.downloadPremiumContent(
        content,
        (progress) => {
          session.downloadProgress = progress;
          this.notifyDownloadProgress(sessionId, progress);
        }
      );

      if (!downloadSuccess) {
        throw new Error("√âchec t√©l√©chargement");
      }

      // Une fois t√©l√©charg√©, lire depuis le fichier local
      const localSession = await this.playFromLocal(sessionId, content);
      if (localSession) {
        localSession.mode = "download"; // Garder l'historique du mode
        localSession.downloadProgress = 100;
      }

      console.log(
        `‚úÖ T√©l√©chargement termin√© et lecture d√©marr√©e: ${content.id}`
      );
      return localSession;
    } catch (error) {
      console.error("‚ùå Erreur t√©l√©chargement+lecture:", error);
      return null;
    }
  }

  /**
   * üîÑ T√©l√©chargement automatique en arri√®re-plan
   */
  private async scheduleBackgroundDownload(content: any): Promise<void> {
    // Attendre 5 secondes pour ne pas interf√©rer avec la lecture
    setTimeout(async () => {
      try {
        console.log(
          `üîÑ T√©l√©chargement automatique en arri√®re-plan: ${content.id}`
        );

        const isAlreadyDownloaded =
          await this.contentManager.isContentDownloaded(content.id);
        if (isAlreadyDownloaded) {
          console.log(`‚è≠Ô∏è D√©j√† t√©l√©charg√©: ${content.id}`);
          return;
        }

        await this.contentManager.downloadPremiumContent(
          content,
          (progress) => {
            console.log(`üì• Arri√®re-plan: ${content.id} - ${progress}%`);
          }
        );

        // console.log(`‚úÖ T√©l√©chargement arri√®re-plan termin√©: ${content.id}`);
      } catch (error) {
        console.error("‚ùå Erreur t√©l√©chargement arri√®re-plan:", error);
      }
    }, 5000);
  }

  /**
   * üìä Obtenir les informations d'un contenu
   */
  private async getContentInfo(contentId: string): Promise<any> {
    try {
      const catalog = await this.contentManager.getPremiumCatalog();
      if (!catalog) return null;

      // Chercher dans toutes les cat√©gories
      const allContent = [
        ...catalog.adhanVoices,
        ...catalog.quranRecitations,
        ...catalog.dhikrCollections,
        ...catalog.premiumThemes,
      ];

      return allContent.find((item) => item.id === contentId);
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration info contenu:", error);
      return null;
    }
  }

  /**
   * üîÑ Basculer entre streaming et local
   */
  public async switchToOfflineMode(contentId: string): Promise<boolean> {
    // console.log(`üîÑ Basculement hors ligne: ${contentId}`);
    return false;
  }

  /**
   * ‚èπÔ∏è Arr√™ter la lecture
   */
  public async stopPlayback(contentId: string): Promise<void> {
    const session = this.activeSessions.get(contentId);
    if (session?.sound) {
      await session.sound.unloadAsync();
      this.activeSessions.delete(contentId);
      console.log(`‚èπÔ∏è Lecture arr√™t√©e: ${contentId}`);
    }
  }

  /**
   * üìã Obtenir le statut d'une session
   */
  public getSessionStatus(contentId: string): {
    mode: string;
    canGoOffline: boolean;
    downloadProgress?: number;
    isActive: boolean;
  } | null {
    const session = this.activeSessions.get(contentId);
    if (!session) return null;

    return {
      mode: session.mode,
      canGoOffline: session.canGoOffline,
      downloadProgress: session.downloadProgress,
      isActive: true,
    };
  }

  /**
   * üìä Statistiques globales hybrides
   */
  public async getHybridStats(): Promise<{
    totalDownloaded: number;
    totalStreamingSessions: number;
    offlineCapable: number;
    dataSavedMB: number;
    recommendedActions: string[];
  }> {
    return {
      totalDownloaded: 0,
      totalStreamingSessions: 0,
      offlineCapable: 0,
      dataSavedMB: 0,
      recommendedActions: [],
    };
  }

  /**
   * üí° G√©n√©rer des recommandations intelligentes
   */
  private async generateRecommendations(): Promise<string[]> {
    const recommendations: string[] = [];

    try {
      // TODO: D√©commenter quand NetInfo sera install√©
      // const networkState = await NetInfo.fetch();
      // const isWifi = networkState.type === "wifi";

      // Mock temporaire - √† remplacer par NetInfo
      const isWifi = true; // Assum√© WiFi pour d√©mo

      if (isWifi) {
        recommendations.push(
          "üì∂ WiFi d√©tect√© - Moment id√©al pour t√©l√©charger vos favoris"
        );
      }

      const downloadedSize = await this.contentManager.getPremiumContentSize();
      if (downloadedSize > 500) {
        recommendations.push(
          "üßπ Plus de 500MB t√©l√©charg√©s - Pensez √† nettoyer l'ancien contenu"
        );
      }

      const activeSessions = this.activeSessions.size;
      if (activeSessions === 0) {
        recommendations.push(
          "üéµ Explorez notre catalogue de r√©citations premium"
        );
      }
    } catch (error) {
      console.error("‚ùå Erreur g√©n√©ration recommandations:", error);
    }

    return recommendations;
  }

  /**
   * üîß Configuration du syst√®me hybride
   */
  public updateConfig(newConfig: Partial<HybridConfig>): void {
    this.config = { ...this.config, ...newConfig };
    this.saveConfig();
    console.log("‚öôÔ∏è Configuration hybride mise √† jour:", this.config);
  }

  public getConfig(): HybridConfig {
    return { ...this.config };
  }

  private async loadConfig(): Promise<void> {
    try {
      const configData = await AsyncStorage.getItem(this.CONFIG_KEY);
      if (configData) {
        this.config = { ...this.config, ...JSON.parse(configData) };
      }
    } catch (error) {
      console.error("‚ùå Erreur chargement config hybride:", error);
    }
  }

  private async saveConfig(): Promise<void> {
    try {
      await AsyncStorage.setItem(this.CONFIG_KEY, JSON.stringify(this.config));
    } catch (error) {
      console.error("‚ùå Erreur sauvegarde config hybride:", error);
    }
  }

  // Callbacks pour l'UI
  private notifyDownloadProgress(sessionId: string, progress: number): void {
    // Cette m√©thode peut √™tre overrid√©e pour notifier l'UI
    console.log(`üì• Session ${sessionId}: ${progress}%`);
  }
}

export default HybridAudioManager;
